{
  "openapi": "3.0.0",
  "info": {
    "description": "A microservice where the users are stored.  It is responsible for creating, updating, deleting user. **Closed for public usage** and is created only for docs purposes. How api gateway uses this check here: [ApiGateway]()",
    "title": "wtc-user-service",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "API"
    }
  ],
  "paths": {
    "/v1/users": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get user by email and password",
        "operationId": "getUserByEmailAndPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/EmailQueryParam"
          },
          {
            "$ref": "#/components/parameters/PasswordQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The request is right and the body is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Wrong passed data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User with that email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "API"
        ],
        "summary": "Create user",
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "responses": {
          "201": {
            "description": "The request is right and the body is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "EmailQueryParam": {
        "name": "email",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "user email",
        "allowEmptyValue": false
      },
      "PasswordQueryParam": {
        "name": "password",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "user password",
        "required": true,
        "allowEmptyValue": false
      }
    },
    "requestBodies": {
      "User": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserDto"
            }
          }
        }
      }
    },
    "schemas": {
      "UserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user username"
          },
          "email": {
            "type": "string",
            "description": "The user email"
          },
          "password": {
            "type": "string",
            "description": "The user password"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user uid"
          },
          "username": {
            "type": "string",
            "description": "The user username"
          },
          "email": {
            "type": "string",
            "description": "The user email"
          },
          "password": {
            "type": "string",
            "description": "The user password"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "developer_message": {
            "type": "string",
            "description": "The message sent by developer"
          },
          "message": {
            "type": "string",
            "description": "The error's message"
          },
          "code": {
            "type": "string",
            "description": "The error code"
          }
        }
      }
    }
  }
}